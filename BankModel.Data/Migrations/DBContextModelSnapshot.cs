// <auto-generated />
using BankModel.Web;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using System;

namespace DataAccess.Migrations
{
    [DbContext(typeof(DBContext))]
    partial class DBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.0-rtm-26452")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DataAccess.Models.Account", b =>
                {
                    b.Property<string>("ID");

                    b.Property<bool>("AcceptCheques");

                    b.Property<string>("AccountMandate");

                    b.Property<string>("AccountOfficer");

                    b.Property<string>("AccountType");

                    b.Property<bool>("AllowOverdraw");

                    b.Property<string>("ApprovedBy");

                    b.Property<decimal>("BookBalance");

                    b.Property<int?>("BranchID");

                    b.Property<bool>("ChargeForOverdrawn");

                    b.Property<int>("DepositAmountLimit");

                    b.Property<string>("DepositAmountPeriod");

                    b.Property<int>("DepositTransactionLimit");

                    b.Property<string>("DepositTransactionPeriod");

                    b.Property<bool>("EmailNotification");

                    b.Property<string>("InterestDrop");

                    b.Property<decimal>("InterestPerAnnum");

                    b.Property<decimal>("MinimumBalance");

                    b.Property<bool>("MonthlyStatement");

                    b.Property<string>("MonthlyStatementBy");

                    b.Property<decimal>("MonthlyStatementCost");

                    b.Property<string>("OverdrawnChargeType");

                    b.Property<decimal>("OverdrawnFee");

                    b.Property<bool>("PostNoCredit");

                    b.Property<bool>("PostNoDebit");

                    b.Property<string>("PostedBy");

                    b.Property<string>("ProductCode");

                    b.Property<string>("ProfileID");

                    b.Property<decimal>("SMSCost");

                    b.Property<bool>("SMSNotification");

                    b.Property<string>("StandingOrder");

                    b.Property<string>("Status");

                    b.Property<int?>("TemplateID");

                    b.Property<DateTime>("TransDate");

                    b.Property<bool>("UseForFixedDeposit");

                    b.Property<bool>("UseForLoans");

                    b.Property<int>("WithdrawalAmountLimit");

                    b.Property<string>("WithdrawalAmountPeriod");

                    b.Property<int>("WithdrawalTransactionLimit");

                    b.Property<string>("WithdrawalTransactionPeriod");

                    b.HasKey("ID");

                    b.HasIndex("BranchID");

                    b.HasIndex("ProfileID");

                    b.HasIndex("TemplateID");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("DataAccess.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<decimal>("ApprovalLimit");

                    b.Property<string>("ApprovedBy");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<DateTime>("PasswordExpiryDate");

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("PostedBy");

                    b.Property<string>("ProfileID");

                    b.Property<string>("SecurityQuestion");

                    b.Property<string>("SecurityQuestionAnswer");

                    b.Property<string>("SecurityStamp");

                    b.Property<string>("Status");

                    b.Property<DateTime>("TransDate");

                    b.Property<decimal>("TransactionLimit");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.Property<bool>("UserOnline");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("ProfileID");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("DataAccess.Models.BalanceSheet", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AccountCode");

                    b.Property<string>("AccountDescription");

                    b.Property<string>("AccountSubType");

                    b.Property<string>("AccountType");

                    b.Property<int?>("BranchID");

                    b.Property<decimal>("CurrentBal");

                    b.Property<decimal>("LastFinancialYearBal");

                    b.Property<decimal>("LastMonthBal");

                    b.Property<decimal>("LastTwoFinancialYearBal");

                    b.Property<DateTime>("TransDate");

                    b.Property<int>("TransMonth");

                    b.Property<int>("TransYear");

                    b.HasKey("ID");

                    b.HasIndex("BranchID");

                    b.ToTable("BalanceSheet");
                });

            modelBuilder.Entity("DataAccess.Models.Branch", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ApprovedBy");

                    b.Property<string>("BranchCode");

                    b.Property<string>("BranchDesc");

                    b.Property<string>("BranchLocation");

                    b.Property<string>("BranchManager");

                    b.Property<int>("ChartofAccountCounter");

                    b.Property<string>("PostedBy");

                    b.Property<string>("Status");

                    b.Property<DateTime>("TransDate");

                    b.HasKey("ID");

                    b.ToTable("Branch");
                });

            modelBuilder.Entity("DataAccess.Models.ChartOfAccount", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AccountName");

                    b.Property<string>("AccountNo");

                    b.Property<int?>("AccountSubHeadID");

                    b.Property<string>("ApprovedBy");

                    b.Property<decimal>("BookBalance");

                    b.Property<int?>("BranchID");

                    b.Property<string>("PostedBy");

                    b.Property<string>("Status");

                    b.Property<DateTime>("TransDate");

                    b.HasKey("ID");

                    b.HasIndex("AccountSubHeadID");

                    b.HasIndex("BranchID");

                    b.ToTable("ChartOfAccount");
                });

            modelBuilder.Entity("DataAccess.Models.ChartOfAccountSubHead", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AccountCode");

                    b.Property<string>("AccountHead");

                    b.Property<string>("AccountName");

                    b.Property<string>("ReportingLine");

                    b.HasKey("ID");

                    b.ToTable("ChartOfAccountSubHead");
                });

            modelBuilder.Entity("DataAccess.Models.FixedDeposit", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AccountID");

                    b.Property<string>("AccountOfficer");

                    b.Property<decimal>("Amount");

                    b.Property<string>("ApprovedBy");

                    b.Property<int?>("BranchID");

                    b.Property<bool>("ChargePenalty");

                    b.Property<DateTime>("EffectiveDate");

                    b.Property<string>("FixedDepositType");

                    b.Property<string>("InterestDropFrequency");

                    b.Property<decimal>("InterestRate");

                    b.Property<string>("LiquidationAccount");

                    b.Property<string>("PenaltyChargeType");

                    b.Property<decimal>("PenaltyFee");

                    b.Property<string>("PostedBy");

                    b.Property<string>("Rollover");

                    b.Property<string>("Status");

                    b.Property<int>("Tenor");

                    b.Property<DateTime>("TerminationDate");

                    b.Property<decimal>("TotalInterest");

                    b.Property<DateTime>("TransDate");

                    b.Property<decimal>("WitholdingTax");

                    b.HasKey("ID");

                    b.HasIndex("AccountID");

                    b.HasIndex("BranchID");

                    b.ToTable("FixedDeposit");
                });

            modelBuilder.Entity("DataAccess.Models.FixedDepositFee", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AccountID");

                    b.Property<decimal>("AmountCharged");

                    b.Property<decimal>("AmountFixed");

                    b.Property<string>("ApprovedBy");

                    b.Property<string>("FeeType");

                    b.Property<string>("FeeTypeApplied");

                    b.Property<decimal>("FeesSubTotal");

                    b.Property<long?>("FixedDepositID");

                    b.Property<string>("PostedBy");

                    b.Property<string>("Status");

                    b.Property<DateTime>("TransDate");

                    b.HasKey("ID");

                    b.HasIndex("AccountID");

                    b.HasIndex("FixedDepositID");

                    b.ToTable("FixedDepositFee");
                });

            modelBuilder.Entity("DataAccess.Models.FixedDepositInterestPayment", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AccountID");

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime>("DateExecuted");

                    b.Property<long?>("FixedDepositID");

                    b.Property<string>("FixedDepositType");

                    b.Property<decimal>("Interest");

                    b.Property<int>("PaymentMonth");

                    b.Property<int>("PaymentYear");

                    b.Property<string>("Status");

                    b.HasKey("ID");

                    b.HasIndex("AccountID");

                    b.HasIndex("FixedDepositID");

                    b.ToTable("FixedDepositInterestPayment");
                });

            modelBuilder.Entity("DataAccess.Models.GLTransaction", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("Amount");

                    b.Property<string>("ApprovedBy");

                    b.Property<string>("CR");

                    b.Property<decimal>("CRBal");

                    b.Property<decimal>("CRBalBF");

                    b.Property<string>("DR");

                    b.Property<decimal>("DRBal");

                    b.Property<decimal>("DRBalBF");

                    b.Property<string>("InstrumentNo");

                    b.Property<string>("Narration");

                    b.Property<string>("PostedBy");

                    b.Property<string>("RefNo");

                    b.Property<string>("Status");

                    b.Property<DateTime>("TransDate");

                    b.Property<string>("TransType");

                    b.HasKey("ID");

                    b.ToTable("GLTransaction");
                });

            modelBuilder.Entity("DataAccess.Models.Loan", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AccountID");

                    b.Property<decimal>("AmountApproved");

                    b.Property<decimal>("AmountRequested");

                    b.Property<string>("ApprovedBy");

                    b.Property<int?>("BranchID");

                    b.Property<DateTime>("EffectiveDate");

                    b.Property<bool>("ExecuteOnlyIfFunded");

                    b.Property<DateTime>("ExtendedTerminationDate");

                    b.Property<long?>("LoanAccountID");

                    b.Property<decimal>("LoanBalance");

                    b.Property<string>("LoanOfficer");

                    b.Property<string>("LoanReason");

                    b.Property<string>("PostedBy");

                    b.Property<string>("Status");

                    b.Property<int?>("TemplateID");

                    b.Property<DateTime>("TerminationDate");

                    b.Property<decimal>("TotalInterest");

                    b.Property<DateTime>("TransDate");

                    b.HasKey("ID");

                    b.HasIndex("AccountID");

                    b.HasIndex("BranchID");

                    b.HasIndex("LoanAccountID");

                    b.HasIndex("TemplateID");

                    b.ToTable("Loan");
                });

            modelBuilder.Entity("DataAccess.Models.LoanFee", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AccountID");

                    b.Property<decimal>("AmountApproved");

                    b.Property<decimal>("AmountCharged");

                    b.Property<string>("ApprovedBy");

                    b.Property<string>("FeeType");

                    b.Property<string>("FeeTypeApplied");

                    b.Property<decimal>("FeesSubTotal");

                    b.Property<long?>("LoanID");

                    b.Property<string>("PostedBy");

                    b.Property<string>("Status");

                    b.Property<DateTime>("TransDate");

                    b.HasKey("ID");

                    b.HasIndex("AccountID");

                    b.HasIndex("LoanID");

                    b.ToTable("LoanFee");
                });

            modelBuilder.Entity("DataAccess.Models.LoanRepayment", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AccountID");

                    b.Property<int?>("BranchID");

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime>("DateExecuted");

                    b.Property<bool>("ExecuteOnlyIfFunded");

                    b.Property<decimal>("Interest");

                    b.Property<long?>("LoanID");

                    b.Property<string>("PostedBy");

                    b.Property<decimal>("Principal");

                    b.Property<int>("RepaymentMonth");

                    b.Property<string>("RepaymentProcessing");

                    b.Property<int>("RepaymentYear");

                    b.Property<string>("Status");

                    b.HasKey("ID");

                    b.HasIndex("AccountID");

                    b.HasIndex("BranchID");

                    b.HasIndex("LoanID");

                    b.ToTable("LoansRepayment");
                });

            modelBuilder.Entity("DataAccess.Models.MonthlyFee", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AccountID");

                    b.Property<decimal>("Amount");

                    b.Property<string>("ApprovedBy");

                    b.Property<int?>("BranchID");

                    b.Property<string>("Frequency");

                    b.Property<string>("IncomeAccount");

                    b.Property<string>("Narration");

                    b.Property<string>("PostedBy");

                    b.Property<string>("Status");

                    b.Property<DateTime>("TransDate");

                    b.HasKey("ID");

                    b.HasIndex("AccountID");

                    b.HasIndex("BranchID");

                    b.ToTable("MonthlyFee");
                });

            modelBuilder.Entity("DataAccess.Models.OverdrawnAccount", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AccountID");

                    b.Property<decimal>("Amount");

                    b.Property<decimal>("BalBF");

                    b.Property<decimal>("Fee");

                    b.Property<string>("FeeType");

                    b.Property<DateTime>("TransDate");

                    b.Property<string>("TransMonth");

                    b.Property<string>("TransYear");

                    b.HasKey("ID");

                    b.HasIndex("AccountID");

                    b.ToTable("OverdrawnAccount");
                });

            modelBuilder.Entity("DataAccess.Models.Parameter", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("ID");

                    b.ToTable("Parameter");
                });

            modelBuilder.Entity("DataAccess.Models.Profile", b =>
                {
                    b.Property<string>("ID");

                    b.Property<string>("ApprovedBy");

                    b.Property<int?>("BranchID");

                    b.Property<string>("ContactAddress");

                    b.Property<int>("CustomerBase");

                    b.Property<string>("CustomerType");

                    b.Property<DateTime>("DateOfBirth");

                    b.Property<string>("Designation");

                    b.Property<string>("Email");

                    b.Property<string>("Employer");

                    b.Property<string>("EmployerAddress");

                    b.Property<string>("Gender");

                    b.Property<string>("HomeTown");

                    b.Property<string>("IncorporationType");

                    b.Property<string>("LGA");

                    b.Property<string>("Lastname");

                    b.Property<string>("MaritalStatus");

                    b.Property<string>("Nationality");

                    b.Property<string>("NextOfKin");

                    b.Property<string>("NoKPhoneNumber");

                    b.Property<string>("NokAddress");

                    b.Property<string>("NokRelationship");

                    b.Property<string>("Othernames");

                    b.Property<string>("PhoneNumber");

                    b.Property<string>("PostedBy");

                    b.Property<string>("ProfileImage");

                    b.Property<string>("RCNo");

                    b.Property<string>("RegisteredBody");

                    b.Property<string>("Sector");

                    b.Property<decimal>("StartupCapital");

                    b.Property<string>("StateOfOrigin");

                    b.Property<string>("Status");

                    b.Property<string>("Title");

                    b.Property<DateTime>("TransDate");

                    b.Property<decimal>("Turnover");

                    b.Property<string>("Website");

                    b.HasKey("ID");

                    b.HasIndex("BranchID");

                    b.ToTable("Profile");
                });

            modelBuilder.Entity("DataAccess.Models.ProfitAndLoss", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AccountName");

                    b.Property<string>("AccountNo");

                    b.Property<string>("AccountSubType");

                    b.Property<string>("AccountType");

                    b.Property<int?>("BranchID");

                    b.Property<decimal>("CRBalBF");

                    b.Property<decimal>("ClosingCRBal");

                    b.Property<decimal>("ClosingDRBal");

                    b.Property<decimal>("CurrentCR");

                    b.Property<decimal>("CurrentDR");

                    b.Property<decimal>("DRBalBF");

                    b.Property<DateTime>("TransDate");

                    b.Property<int>("TransMonth");

                    b.Property<int>("TransYear");

                    b.HasKey("ID");

                    b.HasIndex("BranchID");

                    b.ToTable("ProfitAndLoss");
                });

            modelBuilder.Entity("DataAccess.Models.SavingsInterest", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AccountID");

                    b.Property<decimal>("Amount");

                    b.Property<decimal>("BalBF");

                    b.Property<decimal>("Rate");

                    b.Property<DateTime>("TransDate");

                    b.Property<string>("TransMonth");

                    b.Property<string>("TransYear");

                    b.HasKey("ID");

                    b.HasIndex("AccountID");

                    b.ToTable("SavingInterest");
                });

            modelBuilder.Entity("DataAccess.Models.SMS", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AccountID");

                    b.Property<decimal>("Amount");

                    b.Property<string>("Message");

                    b.Property<string>("PhoneNumber");

                    b.Property<string>("Status");

                    b.Property<DateTime>("TransDate");

                    b.Property<string>("TransMonth");

                    b.Property<string>("TransYear");

                    b.HasKey("ID");

                    b.HasIndex("AccountID");

                    b.ToTable("SMS");
                });

            modelBuilder.Entity("DataAccess.Models.StandingOrder", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AccountID");

                    b.Property<string>("ApprovedBy");

                    b.Property<long?>("FeesID");

                    b.Property<string>("PostedBy");

                    b.Property<string>("Status");

                    b.Property<DateTime>("TransDate");

                    b.HasKey("ID");

                    b.HasIndex("AccountID");

                    b.HasIndex("FeesID");

                    b.ToTable("StandingOrder");
                });

            modelBuilder.Entity("DataAccess.Models.State", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("LGAs");

                    b.Property<string>("States");

                    b.HasKey("ID");

                    b.ToTable("State");
                });

            modelBuilder.Entity("DataAccess.Models.TemplateAccount", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("AcceptCheques");

                    b.Property<string>("AccountType");

                    b.Property<bool>("AllowOverdraw");

                    b.Property<string>("ApprovedBy");

                    b.Property<bool>("ChargeForOverdrawn");

                    b.Property<int>("DepositAmountLimit");

                    b.Property<string>("DepositAmountPeriod");

                    b.Property<int>("DepositTransactionLimit");

                    b.Property<string>("DepositTransactionPeriod");

                    b.Property<bool>("EmailNotification");

                    b.Property<string>("InterestDrop");

                    b.Property<decimal>("InterestPerAnnum");

                    b.Property<decimal>("MinimumBalance");

                    b.Property<bool>("MonthlyStatement");

                    b.Property<string>("MonthlyStatementBy");

                    b.Property<decimal>("MonthlyStatementCost");

                    b.Property<string>("OverdrawnChargeType");

                    b.Property<decimal>("OverdrawnFee");

                    b.Property<bool>("PostNoCredit");

                    b.Property<bool>("PostNoDebit");

                    b.Property<string>("PostedBy");

                    b.Property<string>("ProductCode");

                    b.Property<decimal>("SMSCost");

                    b.Property<bool>("SMSNotification");

                    b.Property<string>("Status");

                    b.Property<string>("TemplateName");

                    b.Property<DateTime>("TransDate");

                    b.Property<bool>("UseForFixedDeposit");

                    b.Property<bool>("UseForLoans");

                    b.Property<int>("WithdrawalAmountLimit");

                    b.Property<string>("WithdrawalAmountPeriod");

                    b.Property<int>("WithdrawalTransactionLimit");

                    b.Property<string>("WithdrawalTransactionPeriod");

                    b.HasKey("ID");

                    b.ToTable("TemplateAccount");
                });

            modelBuilder.Entity("DataAccess.Models.TemplateFixedDeposit", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("Amount");

                    b.Property<string>("ApprovedBy");

                    b.Property<bool>("ChargePenalty");

                    b.Property<string>("FixedDepositType");

                    b.Property<string>("InterestDropFrequency");

                    b.Property<decimal>("InterestRate");

                    b.Property<string>("PenaltyChargeType");

                    b.Property<decimal>("PenaltyFee");

                    b.Property<string>("PostedBy");

                    b.Property<string>("Status");

                    b.Property<string>("TemplateName");

                    b.Property<int>("Tenor");

                    b.Property<DateTime>("TransDate");

                    b.Property<decimal>("WitholdingTax");

                    b.HasKey("ID");

                    b.ToTable("TemplateFixedDeposit");
                });

            modelBuilder.Entity("DataAccess.Models.TemplateFixedDepositFee", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("Amount");

                    b.Property<string>("ApprovedBy");

                    b.Property<string>("Fees");

                    b.Property<string>("PostedBy");

                    b.Property<string>("Status");

                    b.Property<string>("TemplateName");

                    b.Property<DateTime>("TransDate");

                    b.HasKey("ID");

                    b.ToTable("TemplateFixedDepositFee");
                });

            modelBuilder.Entity("DataAccess.Models.TemplateLoan", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ApprovedBy");

                    b.Property<bool>("AutoTerminate");

                    b.Property<decimal>("CeilingAmount");

                    b.Property<bool>("ChargeForLoanDefault");

                    b.Property<string>("InterestFrequency");

                    b.Property<decimal>("InterestRate");

                    b.Property<string>("InterestType");

                    b.Property<string>("LoanClass");

                    b.Property<string>("LoanDefaultFee");

                    b.Property<string>("LoanType");

                    b.Property<string>("PostedBy");

                    b.Property<string>("RepaymentProcessing");

                    b.Property<string>("Status");

                    b.Property<string>("TemplateName");

                    b.Property<int>("Tenor");

                    b.Property<bool>("TerminateOnlyIfFunded");

                    b.Property<DateTime>("TransDate");

                    b.HasKey("ID");

                    b.ToTable("TemplateLoan");
                });

            modelBuilder.Entity("DataAccess.Models.TemplateLoanFee", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("Amount");

                    b.Property<string>("ApprovedBy");

                    b.Property<string>("Fees");

                    b.Property<string>("PostedBy");

                    b.Property<string>("Status");

                    b.Property<string>("TemplateName");

                    b.Property<DateTime>("TransDate");

                    b.HasKey("ID");

                    b.ToTable("TemplateLoanFee");
                });

            modelBuilder.Entity("DataAccess.Models.TemplateSalary", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("AmountCharged");

                    b.Property<string>("ApprovedBy");

                    b.Property<string>("FeeType");

                    b.Property<string>("FeeTypeApplied");

                    b.Property<string>("PostedBy");

                    b.Property<string>("Status");

                    b.Property<string>("TemplateName");

                    b.Property<DateTime>("TransDate");

                    b.HasKey("ID");

                    b.ToTable("TemplateSalary");
                });

            modelBuilder.Entity("DataAccess.Models.Transactions", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AccountID");

                    b.Property<decimal>("Amount");

                    b.Property<string>("ApprovedBy");

                    b.Property<string>("CR");

                    b.Property<decimal>("CRBal");

                    b.Property<decimal>("CRBalBF");

                    b.Property<string>("DR");

                    b.Property<decimal>("DRBal");

                    b.Property<decimal>("DRBalBF");

                    b.Property<int?>("FromBranchID");

                    b.Property<string>("InstrumentNo");

                    b.Property<string>("Narration");

                    b.Property<string>("PostedBy");

                    b.Property<string>("RefNo");

                    b.Property<string>("Status");

                    b.Property<int?>("ToBranchID");

                    b.Property<DateTime>("TransDate");

                    b.Property<string>("TransType");

                    b.HasKey("ID");

                    b.HasIndex("AccountID");

                    b.HasIndex("FromBranchID");

                    b.HasIndex("ToBranchID");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("DataAccess.Models.Account", b =>
                {
                    b.HasOne("DataAccess.Models.Branch", "Branch")
                        .WithMany()
                        .HasForeignKey("BranchID");

                    b.HasOne("DataAccess.Models.Profile", "Profile")
                        .WithMany("Accounts")
                        .HasForeignKey("ProfileID");

                    b.HasOne("DataAccess.Models.TemplateAccount", "Template")
                        .WithMany()
                        .HasForeignKey("TemplateID");
                });

            modelBuilder.Entity("DataAccess.Models.ApplicationUser", b =>
                {
                    b.HasOne("DataAccess.Models.Profile", "Profile")
                        .WithMany()
                        .HasForeignKey("ProfileID");
                });

            modelBuilder.Entity("DataAccess.Models.BalanceSheet", b =>
                {
                    b.HasOne("DataAccess.Models.Branch", "Branch")
                        .WithMany()
                        .HasForeignKey("BranchID");
                });

            modelBuilder.Entity("DataAccess.Models.ChartOfAccount", b =>
                {
                    b.HasOne("DataAccess.Models.ChartOfAccountSubHead", "AccountSubHead")
                        .WithMany("ChartOfAccount")
                        .HasForeignKey("AccountSubHeadID");

                    b.HasOne("DataAccess.Models.Branch", "Branch")
                        .WithMany("ChartOfAccount")
                        .HasForeignKey("BranchID");
                });

            modelBuilder.Entity("DataAccess.Models.FixedDeposit", b =>
                {
                    b.HasOne("DataAccess.Models.Account")
                        .WithMany("FixedDeposits")
                        .HasForeignKey("AccountID");

                    b.HasOne("DataAccess.Models.Branch", "Branch")
                        .WithMany()
                        .HasForeignKey("BranchID");
                });

            modelBuilder.Entity("DataAccess.Models.FixedDepositFee", b =>
                {
                    b.HasOne("DataAccess.Models.Account", "Account")
                        .WithMany("FixedDepositFees")
                        .HasForeignKey("AccountID");

                    b.HasOne("DataAccess.Models.FixedDeposit", "FixedDeposit")
                        .WithMany("FixedDepositFees")
                        .HasForeignKey("FixedDepositID");
                });

            modelBuilder.Entity("DataAccess.Models.FixedDepositInterestPayment", b =>
                {
                    b.HasOne("DataAccess.Models.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountID");

                    b.HasOne("DataAccess.Models.FixedDeposit", "FixedDeposit")
                        .WithMany()
                        .HasForeignKey("FixedDepositID");
                });

            modelBuilder.Entity("DataAccess.Models.Loan", b =>
                {
                    b.HasOne("DataAccess.Models.Account", "Account")
                        .WithMany("Loans")
                        .HasForeignKey("AccountID");

                    b.HasOne("DataAccess.Models.Branch", "Branch")
                        .WithMany()
                        .HasForeignKey("BranchID");

                    b.HasOne("DataAccess.Models.ChartOfAccount", "LoanAccount")
                        .WithMany()
                        .HasForeignKey("LoanAccountID");

                    b.HasOne("DataAccess.Models.TemplateLoan", "Template")
                        .WithMany()
                        .HasForeignKey("TemplateID");
                });

            modelBuilder.Entity("DataAccess.Models.LoanFee", b =>
                {
                    b.HasOne("DataAccess.Models.Account", "Account")
                        .WithMany("LoanFees")
                        .HasForeignKey("AccountID");

                    b.HasOne("DataAccess.Models.Loan", "Loan")
                        .WithMany("LoanFees")
                        .HasForeignKey("LoanID");
                });

            modelBuilder.Entity("DataAccess.Models.LoanRepayment", b =>
                {
                    b.HasOne("DataAccess.Models.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountID");

                    b.HasOne("DataAccess.Models.Branch", "Branch")
                        .WithMany()
                        .HasForeignKey("BranchID");

                    b.HasOne("DataAccess.Models.Loan", "Loan")
                        .WithMany("LoanRepayments")
                        .HasForeignKey("LoanID");
                });

            modelBuilder.Entity("DataAccess.Models.MonthlyFee", b =>
                {
                    b.HasOne("DataAccess.Models.Account")
                        .WithMany("MonthlyFees")
                        .HasForeignKey("AccountID");

                    b.HasOne("DataAccess.Models.Branch", "Branch")
                        .WithMany()
                        .HasForeignKey("BranchID");
                });

            modelBuilder.Entity("DataAccess.Models.OverdrawnAccount", b =>
                {
                    b.HasOne("DataAccess.Models.Account", "Account")
                        .WithMany("OverdrawnAccounts")
                        .HasForeignKey("AccountID");
                });

            modelBuilder.Entity("DataAccess.Models.Profile", b =>
                {
                    b.HasOne("DataAccess.Models.Branch", "Branch")
                        .WithMany("Profile")
                        .HasForeignKey("BranchID");
                });

            modelBuilder.Entity("DataAccess.Models.ProfitAndLoss", b =>
                {
                    b.HasOne("DataAccess.Models.Branch", "Branch")
                        .WithMany()
                        .HasForeignKey("BranchID");
                });

            modelBuilder.Entity("DataAccess.Models.SavingsInterest", b =>
                {
                    b.HasOne("DataAccess.Models.Account", "Account")
                        .WithMany("SavingsInterests")
                        .HasForeignKey("AccountID");
                });

            modelBuilder.Entity("DataAccess.Models.SMS", b =>
                {
                    b.HasOne("DataAccess.Models.Account", "Account")
                        .WithMany("SMS")
                        .HasForeignKey("AccountID");
                });

            modelBuilder.Entity("DataAccess.Models.StandingOrder", b =>
                {
                    b.HasOne("DataAccess.Models.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountID");

                    b.HasOne("DataAccess.Models.MonthlyFee", "Fees")
                        .WithMany()
                        .HasForeignKey("FeesID");
                });

            modelBuilder.Entity("DataAccess.Models.Transactions", b =>
                {
                    b.HasOne("DataAccess.Models.Account")
                        .WithMany("Transactions")
                        .HasForeignKey("AccountID");

                    b.HasOne("DataAccess.Models.Branch", "FromBranch")
                        .WithMany()
                        .HasForeignKey("FromBranchID");

                    b.HasOne("DataAccess.Models.Branch", "ToBranch")
                        .WithMany()
                        .HasForeignKey("ToBranchID");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("DataAccess.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("DataAccess.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DataAccess.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("DataAccess.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
